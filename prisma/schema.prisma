generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MENTOR
  USER
}

model Users {
  id            String   @id @default(uuid())
  name          String
  username      String   @unique
  email         String   @unique
  password      String
  cpf           String   @unique
  birthdate     String
  gender        String   @default("Male")
  address       String?
  city          String?
  state         String?
  zipCode       String?
  occupation    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  avatar        String?
  phone         String   @unique
  role          Role     @default(USER)
  emailVerified Boolean  @default(false)

  notifications Notifications[]
  certificates  Certificates[]
  courses       Courses[]
  progresses    Progress[]

  @@map("users")
}

model Certificates {
  id        String   @id @default(uuid())
  courseId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

model Courses {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String
  tags        String[]
  level       String   @default("easy")
  duration    Int
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  lessons      Lessons[]
  certificates Certificates[]
  progresses   Progress[]

  @@map("courses")
}

model Lessons {
  id             String      @id @default(uuid())
  title          String
  description    String
  duration       Int
  video          String
  watched        Boolean     @default(false)
  classification Int         @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  transcription  String?
  courseId       String
  materials      Materials[]
  comments       Comments[]
  course         Courses     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  Progress Progress[]

  @@map("lessons")
}

model Progress {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  lessonId  String
  completed Boolean  @default(false)
  updatedAt DateTime @updatedAt

  user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lesson Lessons @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("progress")
}

model Notifications {
  id               String   @id @default(uuid())
  notificationType String
  notificationText String?
  sendUserId       String
  userId           String
  receiveUserId    String
  status           String   @default("unread")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Comments {
  id        String   @id @default(uuid())
  lessonId  String
  userId    String
  content   String
  answer    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lesson Lessons @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Materials {
  id          String   @id @default(uuid())
  lessonId    String
  title       String
  description String
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lesson Lessons @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("materials")
}
